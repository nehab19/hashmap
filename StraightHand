**Leetcode link : https://leetcode.com/problems/hand-of-straights/description/ **/

import java.util.TreeMap;

public class StraightHand {
    public boolean isNStraightHand(int[] hand, int groupSize) {
        int size = hand.length;

        if (size % groupSize != 0) {
            return false;
        }
        //as we need sorted numbers we would use tree map
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int card : hand) {
            map.put(card, map.getOrDefault(card, 0) + 1);
        }

        while (!map.isEmpty()) {
            //it will return the first lowest key in map
            int currentElement = map.firstKey();
            for (int i = 0; i < groupSize; i++) {
                if (!map.containsKey(currentElement + i)) {
                    return false;
                }
                map.put(currentElement + i, map.get(currentElement + i) - 1);
                if (map.get(currentElement + i) == 0) {
                    map.remove(currentElement + i);
                }
            }

        }
        return true;

    }
}
